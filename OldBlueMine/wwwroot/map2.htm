<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />


    <title>COR Maps</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">
        * {
            cursor: default !important;
        }

        html, body {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        #swissMap {
            position: absolute;
            top: 55px;
            left: 0px;
            right: 0px;
            bottom: 0px;
        }


        #zoom-level {
            display: none;
            position: absolute;
            margin: 0px;
            padding: 10px;
            top: 0;
            left: 0;
            z-index: 1000;
            background: white;
            opacity: 0.85;
            width: 3cm;
        }


        .leaflet-tooltip-top {
            margin-top: -19px !important;
        }

        .leaflet-control-attribution {
            display: none;
            #transform: scale(0.9, 0.9) translate(5%, 10%);
            transform: scale(0.5, 0.5) translate(50%, 50%);
            position: absolute;
            right: 0px;
            bottom: 0px;
        }

        .leaflet-interactive {
            cursor: pointer !important;
        }

        .leg {
            width: 0.5cm;
            height: 0.5cm;
            opacity: 1;
            border: 1px solid #E0E0E0;
        }

        .legende {
            position: absolute;
            display: block;
            top: 85px;
            right: 30px;
            z-index: 999;
            padding: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
            background-color: white;
            opacity: 0.85;
            border-radius: 3mm;
        }

        .cont {
            padding-left: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
        }

        .zoomControl {
            position: absolute;
            display: block;
            top: 85px;
            left: 30px;
            z-index: 9999;
            background-color: white;
            opacity: 0.85;
            border: 1px solid gray;
            border-radius: 5mm;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

            .zoomControl .mp {
                display: table-cell;
                width: 1cm;
                height: 1cm;
                text-align: center;
                vertical-align: middle;
                #font: 5mm/1.5 Arial, Helvetica, sans-serif;
                font-family: "Lucida Console", Monaco, monospace;
                font-size: 5mm;
                color: gray;
            }

                .zoomControl .mp:hover {
                    background-color: #F0F0F0;
                }
    </style>

    <!--<link rel="shortcut icon" type="image/png" href="../favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.ico" />
    <!--
    <link href="Layout.ashx?Single=leaflet.leaflet.css" rel="stylesheet" type="text/css" />
        -->
    <link href="../images/leaflet.css" rel="stylesheet" type="text/css" />


    <script type="text/javascript" src="Script.ashx?Single=Portal.Globals.js" charset="utf-8"></script>
    <script type="text/javascript" src="Script.ashx?Single=leaflet.EasyAjax.js" charset="utf-8"></script>
    <script type="text/javascript" src="Script.ashx?Single=leaflet.leaflet.js" charset="utf-8"></script>

</head>
<body>
    <div id="zoom-level">Zoom Level: 18</div>


    <div class="zoomControl">
        <div class="mp" style="border-top-left-radius: 5mm; border-top-right-radius: 5mm;" onclick="map.zoomHome()">&#x2606;</div><div style="clear: both;"></div>
        <div class="mp" onclick="map.zoomIn()">+</div><div style="clear: both;"></div>
        <div class="mp" style="border-bottom-left-radius: 5mm; border-bottom-right-radius: 5mm;" onclick="map.zoomOut()">-</div><div style="clear: both;"></div>
    </div>

    <div class="legende">
        <table id="gk_legend">
            <tr>
                <td class="leg" style="background-color: #FF0000;"></td>
                <td class="cont">Hauptsitz</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FF7F00;"></td>
                <td class="cont">Generalagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #007FFF;"></td>
                <td class="cont">Hauptagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FF00;"></td>
                <td class="cont">Agentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FFFF;"></td>
                <td class="cont">Hubs</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FFFF00;"></td>
                <td class="cont">Spezial</td>
            </tr>
        </table>
    </div>

    <div id="swissMap"></div>

    <script type="text/javascript">
        var map = null;
        var polygons = [];
        var markers = [];

        var debug_ipad = false;
        if (debug_ipad)
        {
            window.onerror = function (messageOrEvent, source, lineno, colno, error)
            {
                alert(messageOrEvent);
                if (source != null)
                    alert(source);
            }
        }


        Math.trunc = Math.trunc || function (x)
        {
            var n = x - x % 1;
            return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;
        };

        Math.radians = function (degrees)
        {
            return degrees * Math.PI / 180.0;
        };

        /*
        // https://ajaxhttpheaders2.appspot.com/?callback=abc

        $.ajax({
            url: "http://ajaxhttpheaders.appspot.com",
            dataType: 'jsonp',
            success: function(headers) {
                language = headers['Accept-Language'];
                nowDoSomethingWithIt(language);
            }
        });

        abc({
            'Accept-Language': 'en-US,en;q=0.9,de-CH;q=0.8,de;q=0.7,fr-CH;q=0.6,fr;q=0.5',
            'X-Cloud-Trace-Context': '70452269c47257a7954e3cbe535679fb/17612747306617096780',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,;q=0.8',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36',
            'Dnt': '1',
            'Host': 'ajaxhttpheaders2.appspot.com',
            'X-Appengine-Region': 'ca',
            'X-Appengine-City': 'palo alto',
            'X-Appengine-Citylatlong': '37.402487, -122.147856',
            'Upgrade-Insecure-Requests': '1',
            'Content-Type': '; charset="utf-8"',
            'X-Appengine-Country': 'CH'
        })
        */

        // https://stackoverflow.com/questions/1043339/javascript-for-detecting-browser-language-preference
        function getFirstBrowserLanguage()
        {
            var nav = window.navigator,
                browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
                i,
                language;

            // support for HTML 5.1 "navigator.languages"
            //if (Array.isArray(nav.languages)) // IE8-trap
            if (Object.prototype.toString.call(nav.languages) === '[object Array]')
            {
                for (i = 0; i < nav.languages.length; i++)
                {
                    language = nav.languages[i];
                    if (language && language.length)
                    {
                        return language;
                    }
                }
            }

            // support for other well known properties in browsers
            for (i = 0; i < browserLanguagePropertyKeys.length; i++)
            {
                language = nav[browserLanguagePropertyKeys[i]];
                if (language && language.length)
                {
                    return language;
                }
            }

            return null;
        }


        function getBrowserLanguage(dft)
        {
            let bl = getFirstBrowserLanguage() || dft;
            let pos = bl.indexOf("-");
            if (pos !== -1)
                bl = bl.substr(0, pos);

            return bl;
        }


        function getUserLanguage()
        {
            return getBrowserLanguage("de");
        }


        function SetDefaultVariables(url)
        {
            if (window.parent.Settings)
            {
                url = url.replace("{@basic}", window.parent.Settings.basicLink);
            }

            if (window.top && window.top.Portal && window.top.Portal.Session && window.top.Portal.Session.ID)
            {
                url = url.replace("{@BE_Hash}", window.top.Portal.Session.ID());
            }
            else
                url = url.replace("{@BE_Hash}", "200CEB26807D6BF99FD6F4F0D1CA54D4");

            return url;
        }


        function spreadMessage(object)
        {
            var inFrame = (function ()
            {
                try
                {
                    return window.self !== window.top;
                } catch (e)
                {
                    return true;
                }
            })();
            console.log("inFrame", inFrame);

            if (inFrame)
                Portal.Global.spreadMessage(object);
            else
            {
                //window.postMessage(JSON.stringify({ "msg": "Hello world" }), '*');
                window.postMessage(JSON.stringify(object), '*');
            }
        }


        function testNaviSO()
        {
            var msg =
                {
                    "Action": "VWS.Tree.onAfterSelectionChange"
                    , "Param": {
                        "Action": ""
                        , "Data": {
                            "Type": "SO"
                            , "Value": "c38860a1-1c61-4590-9410-9fa1ab8586b1"
                            , "Text": "0006 Althardstrasse"
                            , "Parent": "31bfa452-e97d-475a-ac65-cf4d885fcd5c"
                            , "ApertureObjID": "0000000002GQ0000C2"
                            , "_hasPRT": 1
                            , "_hasInsert": 1
                            , "_hasDelete": 1
                        }
                    }
                };

            spreadMessage(msg);
        }


        function testNaviGB()
        {
            var msg =
                {
                    "Action": "VWS.Tree.onAfterSelectionChange",
                    "Param": {
                        "Action": "",
                        "Data": {
                            "Type": "GB",
                            "Value": "e79223ff-02a8-4a7a-b148-e1fbafa8d934",
                            "Text": "GB01 Althardstrasse 10",
                            "Background": "#00FF00",
                            "Parent": "c38860a1-1c61-4590-9410-9fa1ab8586b1",
                            "ApertureObjID": "0000000002GQ0000FQ",
                            "_hasPRT": 1,
                            "_hasInsert": 1,
                            "_hasDelete": 1
                        }
                    }
                }
                ;

            spreadMessage(msg);
        }


        function testFilterChange()
        {
            var msg =
                {
                    "Action": "VWS.Tree.onAfterFilterChange",
                    "Param": {
                        "Datum": "",
                        "LD": "",
                        "RG": "",
                        "ORT": ""
                    }
                }
                ;

            spreadMessage(msg);
        }



        function navigateTo(uuid)
        {
            spreadMessage(
                {
                    Action: 'vws.tree.navigateto',
                    Param: {
                        navigateTo: uuid // '9dc95c1c-4830-4b01-85b5-593b6ea5e44b'
                    }
                }
            );
        }


        // https://gis.stackexchange.com/a/816/3997
        // https://jsfiddle.net/xwaocc00/
        function polygonArea(poly2)
        {
            var poly = JSON.parse(JSON.stringify(poly2));
            var p1, p2, i;
            var area = 0.0;
            var len = poly.length;

            if (len > 2)
            {

                for (i = 0; i < len; i++)
                {
                    poly[i] = poly[i].map(Math.radians)
                }

                for (i = 0; i < len - 1; i++)
                {
                    p1 = poly[i];
                    p2 = poly[i + 1];

                    area += (p2[0] - p1[0]) *
                        (
                            2
                            + Math.sin(p1[1])
                            + Math.sin(p2[1])
                        );
                }

                // https://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius
                // https://en.wikipedia.org/wiki/Earth_ellipsoid
                // The radius you are using, 6378137.0 m corresponds to the equatorial radius of the Earth.
                var equatorial_radius = 6378137; // m
                var polar_radius = 6356752.3142; // m
                var mean_radius = 6371008.8; // m
                var authalic_radius = 6371007.2; // m (radius of perfect sphere with same surface as reference ellipsoid)
                var volumetric_radius = 6371000.8 // m (radius of a sphere of volume equal to the ellipsoid)

                var radius = mean_radius;

                area = area * radius * radius / 2.0;
            } // End if len > 0

            // equatorial_radius: 6391.565558418869 m2
            // mean_radius:       6377.287126172337m2
            // authalic_radius:   6377.283923019292 m2
            // volumetric_radius: 6377.271110415153 m2
            // merid_radius:      6375.314923754325 m2
            // polar_radius:      6348.777989748668 m2
            // R:                 6368.48180842528 m2
            // hrad:              6391.171919886588 m2

            // http://postgis.net/docs/doxygen/2.2/dc/d52/geography__measurement_8c_a1a7c48d59bcf4ed56522ab26c142f61d.html
            // ST_Area(g)               5.21556075001092E-07
            // ST_Area(g, false)     6379.25032051953
            // ST_Area(g, true)      6350.65051177517

            // return area;
            // return area.toFixed(2);
            return Math.abs(area).toFixed(0);
        }


        function latLongToString(latlng)
        {
            var x = latlng.lat;
            var y = latlng.lng;

            var prefix1 = x < 0 ? "S" : "N";
            var prefix2 = y < 0 ? "W" : "E";

            x = Math.abs(x);
            y = Math.abs(y);

            var grad1 = Math.trunc(x);
            x = (x - grad1) * 60;
            var grad2 = Math.trunc(y);
            y = (y - grad2) * 60;

            var min1 = Math.trunc(x);
            var min2 = Math.trunc(y);

            var sec1 = ((x - min1) * 60).toFixed(1);
            var sec2 = ((y - min2) * 60).toFixed(1);

            min1 = (min1 < 10 ? "0" : "") + min1;
            min2 = (min2 < 10 ? "0" : "") + min2;

            sec1 = (sec1 < 10 ? "0" : "") + sec1;
            sec2 = (sec2 < 10 ? "0" : "") + sec2;

            var res = grad1 + "°" + min1 + "'" + sec1 + '"' + prefix1 + " " + grad2 + "°" + min2 + "'" + sec2 + '"' + prefix2;
            return res;
        }


        function numberWithCommas(x)
        {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "'");
        }




        function loadMarkers()
        {
            var markerUrl = "../ajax/AnySelect.ashx?sql=Maps.Marker_GB.sql&BE_ID={@BE_Hash}";
            markerUrl = SetDefaultVariables(markerUrl);
            // console.log("markerUrl", markerUrl);


            new Http.Json(markerUrl, null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    // console.log(table.columns);
                    // console.log(table.columns["OBJ_Label"].index);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_code = table.columns["OBJT_Code"].index;
                    var index_label = table.columns["OBJ_Label"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Long"].index;
                    var index_category = table.columns["OBJ_Kategorie"].index;
                    var index_color = table.columns["OBJ_Color"].index;
                    var index_poly = table.columns["OBJ_Polygon"].index;



                    var allCoords = [];


                    // Singapur
                    // table.rows.push(["uid", "code", "label", 1.345733633103394 , 103.83649706840517, null ]);


                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var code = table.rows[i][index_code];
                        var label = table.rows[i][index_label];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];
                        var category = table.rows[i][index_category];
                        var color = table.rows[i][index_color];
                        var poly = table.rows[i][index_poly];


                        // console.log(uid);
                        // console.log(code);
                        // console.log(label);
                        // console.log(latitude);
                        // console.log(longitude);
                        // console.log(poly);


                        if (label == null)
                            label = "";

                        label = label.replace(/(?:\r\n|\r|\n)/g, '<br />');
                        // console.log(label);

                        if (poly != null)
                            poly = poly.split(',').map(function (x) { return x.split(' ') });

                        if (latitude == null || longitude == null)
                            continue;



                        allCoords.push([latitude, longitude]);
                        var latlng = L.latLng(latitude, longitude);


                        //var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "display: block; margin-left: -15px; margin-top: -15px; width: 0; \n  height: 0; \n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  \n  border-top: 20px solid #f00;\n  ";



                        var greenIcon = L.divIcon({
                            className: "MapElement",
                            // iconAnchor: [0, 24],
                            // labelAnchor: [-6, 0],
                            // popupAnchor: [0, -36],
                            html: "<span style=\"" + markerHtmlStyles + "\" />"
                        });


                        var options = {
                            iconUrl: 'marker-icon.png',
                            iconRetinaUrl: 'marker-icon-2x.png',
                            shadowUrl: 'marker-shadow.png',
                            iconSize: [25, 411],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -120],
                            tooltipAnchor: [16, -228],
                            shadowSize: [41, 41]
                        };


                        var houseImage = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\"\n   viewBox=\"0 0 512 512\" width=\"22px\" height=\"22px\">\n<path\n d=\"M256,69.972L50,275.814h42.507v166.214h326.985V275.814H462L256,69.972z M374.492,397.028  h-73.768v-86.495h-89.451v86.495h-73.768V251.99L256,133.587l118.492,118.402V397.028z\"\n  fill=\"{@col1}\" />\n<path\n fill=\"{@col2}\" opacity=\"0.4\" \n d=\"M 137.505,251.99 256,133.587 374.492,251.989 v 145.039 h -73.768 v -86.495 h -89.451 v 86.495 h -73.768 z\" />\n</svg>";

                        var greenIcon = L.divIcon(
                            {
                                className: "customIcon",
                                iconAnchor: [12, 12],
                                // tooltipAnchor: [1120, 0],
                                // labelAnchor: [1120, 0],
                                popupAnchor: [0, 0],
                                //html: "<img src=\"images/icons/gm_SR.png\" />"
                                //html: "<img src=\"images/icons/GB.png\" />"
                                //html: "<img src=\"../images/leaflet/helvetia23.png\" />"
                                html: houseImage.replace("{@col1}", color).replace("{@col2}", color)
                            }
                        );

                        // https://jsfiddle.net/guspersson/393ehmsq/
                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: greenIcon }).addTo(map);



                        var tt = L.tooltip(
                            {
                                permanent: true,
                                direction: 'top'
                                // direction: 'right'
                                //tooltipAnchor: [1120, 1120]
                                // , _anchor: [0, -110]
                            }
                        )
                            .setContent(label)
                            ;

                        // marker.bindTooltip(tt);


                        var contentString = category + "<br />" + label
                        // + "<br />GPS: " + latLongToString(latlng);
                        // contentString = contentString + "<br />" + "Fl&auml;che: " + numberWithCommas(polygonArea(poly)) + " m<sup>2</sup>&nbsp;&nbsp;(+/-30m<sup>2</sup>)";
                        var popup = new L.Popup()
                            .setLatLng(latlng)
                            .setContent(contentString)
                            //.openOn(map)
                            ;

                        marker
                            .bindPopup(popup)
                            .addTo(map)
                            ;


                        // console.log(uid);
                        marker.on("click", function (uuid, e) // uid is now called uuid
                        {
                            // console.log("onclick");
                            map.setView(e.latlng, 18, { animate: true });
                            if (marker && marker.popup)
                                marker.popup();

                            var ml = window.parent.document.querySelector('#iMenuLeft');
                            if (ml)
                            {
                                // console.clear();
                                // console.log("navto: ", uuid)
                                ignoreThisNavigation = true;
                                navigateTo(uuid);
                            }

                        }.bind(this, uid));
                        markers[uid] = marker;



                        /*
                        var circle = L.circle(latlng,
                        {
                        color: 'red'
                        , fillColor: '#f03'
                        , fillOpacity: 0.5
                        , radius: 15
                        }).addTo(map);
                        */

                        if (poly == null)
                            continue;

                        var polygon = L.polygon(poly);

                        /*
                        polygon.setStyle({
                        fillColor: '#FF00FF'
                        ,fillOpacity: 0.7
                        ,color: 'white'  //Outline color
                        ,weight: 2
                        ,opacity: 1
                        });
                        */


                        var popupString = "Fl&auml;che: " + numberWithCommas(polygonArea(poly)) + " m<sup>2</sup>";
                        polygon.addTo(map)
                            //.bindPopup(popupString)
                            //.openPopup()
                            ;

                        // polygon.on("dblclick", function (uuid, e)
                        polygon.on("click", function (uuid, e)
                        {
                            var t = "{@basic}gebaeude.aspx?uid={@obj}&muid=@GB&env=ov&ro=false&proc={@BE_Hash}";
                            t = SetDefaultVariables(t);

                            //navigateTo(uuid);
                            var ml = window.parent.document.querySelector('#frameDWGForm');
                            if (ml) ml.src = t.replace("{@obj}", uuid);

                            observeIframe();
                        }.bind(this, uid));
                        polygons[uid] = marker;

                    } // next i

                    var initialBounds = L.latLngBounds(allCoords);

                    map.zoomHome = function (homeView)
                    {
                        map.fitBounds(homeView);
                    }.bind(this, initialBounds);

                    map.zoomHome();

                } // End delegate success
                ).send()
                ;

            // console.log("leaving loadMarkers");
        } // End Function loadMarkers


        function bracketDevicePixelRatio()
        {
            var brackets = [1, 1.3, 1.5, 2, 2.6, 3],
                baseRatio = window.devicePixelRatio || 1;
            for (var i = 0; i < brackets.length; i++)
            {
                var scale = brackets[i];
                if (scale >= baseRatio || (baseRatio - scale) < 0.1)
                {
                    return scale;
                }
            }
            return brackets[brackets.length - 1];
        } // End Function bracketDevicePixelRatio


        var ignoreThisNavigation = false;

        // target: typ (ld, ort, so, gb)
        function onBaumClick(uid, typ)
        {
            typ = (typ || "").toLowerCase();

            if (ignoreThisNavigation)
            {
                if (typ == "so")
                    ignoreThisNavigation = false;

                return;
            }


            function zoomIn(uid)
            {
                // console.log("zoomIn", uid);
                var boundsUrl = "../ajax/AnySelect.ashx?sql=Maps.ObjectBounds.sql&BE_ID={@BE_Hash}&obj_uid=";
                boundsUrl = SetDefaultVariables(boundsUrl);

                new Http.Json(boundsUrl + uid, null)
                    .success(
                    function (result)
                    {
                        // console.log("onSuccess");

                        var table = result.tables[0];
                        // console.log(table.columns);
                        // console.log(table.columns["OBJ_Label"].index);

                        var index_objt = table.columns["OBJT_UID"].index;
                        var index_uid = table.columns["OBJ_UID"].index;

                        var index_latitude = table.columns["OBJ_Lat"].index;
                        var index_longitude = table.columns["OBJ_Lng"].index;

                        var index_minLat = table.columns["OBJ_Min_Lat"].index;
                        var index_minLng = table.columns["OBJ_Min_Long"].index;
                        var index_maxLat = table.columns["OBJ_Max_Lat"].index;
                        var index_maxLng = table.columns["OBJ_Max_Lng"].index;

                        for (var i = 0; i < table.rows.length; ++i)
                        {
                            var code = table.rows[i][index_objt];
                            var uid = table.rows[i][index_uid];
                            var latitude = table.rows[i][index_latitude];
                            var longitude = table.rows[i][index_longitude];


                            var minLat = table.rows[i][index_minLat];
                            var minLng = table.rows[i][index_minLng];
                            var maxLat = table.rows[i][index_maxLat];
                            var maxLng = table.rows[i][index_maxLng];

                            if (minLat != null && minLng != null && maxLat != null && maxLng != null)
                            {
                                var zoomBounds = L.latLngBounds([[minLat, minLng], [maxLat, maxLng]]);
                                map.fitBounds(zoomBounds);
                            }
                            else if (latitude != null && longitude != null)
                            {
                                map.setView([latitude, longitude], 18, { animate: true });
                                // Zoom coordinates
                            }
                        }
                    }
                    ).send();
            } // End Function ZoomIn


            switch (typ)
            {
                case "ld":
                case "ort":
                case "so":
                    zoomIn(uid);
                    break;
                case "gb":
                    zoomIn(uid);
                    markers[uid].openPopup()
                    break;
                case "eg":
                case "og":
                case "ug":
                    //console.log("Geschoss");
                    break;
                default:
                    console.log("Objekt nicht definiert.");
            } // End Switch

        } // End Function onBaumClick


        // https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically
        function getParamNames(func)
        {
            var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
            var ARGUMENT_NAMES = /([^\s,]+)/g;

            var fnStr = func.toString().replace(STRIP_COMMENTS, '');
            var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
            if (result === null)
                result = [];
            return result;
        }

        // Polyfill for Function#name on browsers that do not support it (IE 11):
        if (!(function f() { }).name)
        {
            Object.defineProperty(Function.prototype, 'name', {
                get: function ()
                {
                    var name = (this.toString().match(/^function\s*([^\s(]+)/) || [])[1];
                    // For better performance only parse once, and then cache the
                    // result through a new accessor for repeated access.
                    Object.defineProperty(this, 'name', { value: name });
                    return name;
                }
            });
        }

        function logParams(args)
        {
            var pn = getParamNames(args.callee)
            var x = [];
            for (var i = 0; i < args.length; ++i)
            {
                if (i >= pn.length)
                    x["arg[" + (i + 1).toString() + "]"] = args[i];
                else
                    x[pn[i]] = args[i];
            }

            function resolveCaller(a)
            {
                if (a == null)
                    return "'window/global'";

                if (a.name != null && a.name != "")
                    return a.name;

                return "'anonymous function' in " + resolveCaller(a.caller);
            }

            console.log(resolveCaller(args.callee), "called with", x);
        }


        function onMarkerContextMenu(uuid, e) // uid is now called uuid
        {
            // console.log("onMarkerContextMenu", e)
            // e.originalEvent.target.parentElement.remove()
            // e.target._leaflet_id

            function addPosition(latlng)
            {
                return ' data-position="' + latlng.lat + ' ' + latlng.lng + '" ';
            }


            // alert(e.latlng);
            var contextMenu = '';
            contextMenu += '<span style="font-weight: bold;">Hier können Sie</span><br />';
            contextMenu += '<a onclick="handleContextOption(\'deleteWerbetafel\', this.getAttribute(\'data-position\'), \'' + uuid + '\');" ' + addPosition(e.latlng) + ' data-uuid="' + uuid + '">eine Leuchtreklame entfernen</a>';

            var popup = new L.Popup({ closeButton: true, autoClose: true })
                .setLatLng(e.latlng)
                .setContent(contextMenu)
                //.openOn(map)
                ;

            popup.openOn(map);
        }


        function onMarkerClick(uuid, e)
        {
            var t = "{@basic}anlage.aspx?uid={@obj}&muid=AL&env=ov&ro=false&proc={@BE_Hash}";
            t = SetDefaultVariables(t);
            // console.log(t);
            // navigateTo(uuid);
        }


        function createWerbetafelIcon()
        {
            var icon = L.divIcon(
                {
                    className: "customIcon",
                    iconAnchor: [12, 12],
                    popupAnchor: [0, 0],
                    html: "<img src=\"../images/leaflet/helvetia23.png\" />"
                }
            );

            return icon;
        }


        var werbetafeln = [];

        function addWerbetafel(lat, lng)
        {
            map.closePopup();
            var url = "../ajax/AnySelect.ashx?sql=Maps.InsertWerbetafel.sql&BE_ID={@BE_Hash}&lat={@lat}&lng={@lng}";
            url = SetDefaultVariables(url);
            url = url.replace("{@lat}", lat);
            url = url.replace("{@lng}", lng);

            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("addWerbetafel: success");

                    var table = result.tables[0];
                    // console.log(table);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Lng"].index;

                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];

                        if (latitude == null || longitude == null)
                            continue;

                        var werbetafel_icon = createWerbetafelIcon();

                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: werbetafel_icon }).addTo(map);
                        marker.on("click", onMarkerClick.bind(this, uid)); // uid is now called uuid
                        marker.on("contextmenu", onMarkerContextMenu.bind(this, uid)); // uid is now called uuid
                        werbetafeln[uid] = marker;
                    }

                }).send();

        }


        function loadWerbetafeln(lat, lng)
        {
            var url = "../ajax/AnySelect.ashx?sql=Maps.Marker_Werbetafeln.sql&BE_ID={@BE_Hash}";
            url = SetDefaultVariables(url);

            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("loadWerbetafeln: success");

                    var table = result.tables[0];
                    // console.log(table);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Lng"].index;

                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];

                        if (latitude == null || longitude == null)
                            continue;

                        var werbetafel_icon = createWerbetafelIcon();

                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: werbetafel_icon });

                        if (map.getZoom() > 16)
                        {
                            marker.addTo(map);
                        }

                        marker.on("click", onMarkerClick.bind(this, uid)); // uid is now called uuid
                        marker.on("contextmenu", onMarkerContextMenu.bind(this, uid)); // uid is now called uuid
                        werbetafeln[uid] = marker;
                    }

                }).send();

        }

        function deleteWerbetafel(uuid)
        {
            // console.log("delete Werbetafel " + uuid);

            var url = "../ajax/Data.ashx?sql=Maps.DeleteWerbetafel.sql&BE_ID={@BE_Hash}&obj_uid=" + uuid;
            url = SetDefaultVariables(url);

            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("addWerbetafel: success");
                    werbetafeln[uuid].remove();
                    delete werbetafeln[uuid];
                })
                .always(function ()
                {
                    map.closePopup();
                })
                .send();
        }


        function handleContextOption(command, latLng, uuid)
        {
            // logParams(arguments);

            var a = latLng.split(' ');
            latLng = { lat: +(a[0]), lng: +(a[1]) };

            switch (command)
            {
                case "addPolygon":
                    console.log("TODO:", command, latLng, "muss noch gemacht werden - hatte keine Zeit :P")
                    break;
                case "werbetafel":
                    addWerbetafel(latLng.lat, latLng.lng);
                    break;
                case "deleteWerbetafel":
                    deleteWerbetafel(uuid);
                    break;
                default:
                    console.log("TODO:", command, latLng)
                    break;
            }

        }


        function onWerbetafelChange()
        {
            for (var uid in werbetafeln)
            {
                if (werbetafeln.hasOwnProperty(uid))
                {
                    werbetafeln[uid].remove();
                    delete werbetafeln[uid];
                }
            }

            loadWerbetafeln();
        }


        // https://jsfiddle.net/Lru99de0/1/
        function observeIframe()
        {
            // Blocker is the element that has a changing display value
            var blocker = window.parent.document.querySelector('#frameDWGForm');
            if (blocker == null)
                return;

            var timoutHandle = null;
            var timoutHandle2 = null;

            try
            {
                // Our mutation observer, which we attach to blocker later
                var observer = new MutationObserver(function (mutations)
                {
                    mutations.forEach(function (mutation)
                    {
                        // console.log("style changed");
                        var cs = window.getComputedStyle(blocker);


                        if (mutation.attributeName === 'style' && cs.getPropertyValue('display') === 'none')
                        {
                            window.clearTimeout(timoutHandle);
                            timoutHandle = window.setTimeout(function ()
                            {
                                observer.disconnect();
                                window.top.Portal.Frameset.focusFrameByWindow(window);

                                // console.log("form-frame again is invisible NOW.");
                                onWerbetafelChange();
                            }, 400);
                        }

                        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to 'none'?
                        if (mutation.attributeName === 'style' && cs.getPropertyValue('display') !== 'none'
                        )
                        {
                            window.clearTimeout(timoutHandle2);
                            timoutHandle2 = window.setTimeout(function ()
                            {
                                // console.log("form-frame is now visible.");
                            }, 400);
                        }
                    });
                });

                // Attach the mutation observer to blocker, and only when attribute values change
                observer.observe(blocker, { attributes: true });
            }
            catch (crapPad) { }
        }



        // https://maps.wikimedia.org
        // https://maps.wikimedia.org/main.js
        function initMap()
        {
            // console.log("init");
            var ml = window.parent.document.querySelector('#iMenuLeft');

            // Create a map
            map = L.map('swissMap', { zoomControl: false }).setView([47.317390, 8.520293], 18); // SwissRe Soodring 33, Adliswil
            map.zoomHome = function () { };

            // https://jsfiddle.net/BC7q4/444/
            var southWest = new L.LatLng(45.802216, 5.920721);
            var northEast = new L.LatLng(47.968862, 10.769762);
            var bounds = new L.LatLngBounds(southWest, northEast);

            // https://stackoverflow.com/questions/17187161/bounding-view-of-a-leaflet-image-map-to-a-landscape-viewport
            // http://leafletjs.com/reference-1.2.0.html#map-fitbounds
            var bounds = [[45.802216, 5.920721], [47.968862, 10.769762]];
            // map.fitBounds(bounds, { padding: [] });
            map.fitBounds(bounds, null);


            // scale:
            // Optional scale for the high- resolution screens such as Retina.
            // Supported scales are 1.3, 1.5, 2, 2.6, 3
            var scale = bracketDevicePixelRatio();
            var scalex = (scale === 1) ? '' : ('@' + scale + 'x');

            // Add a map layer
            L.tileLayer("{server}/{style}/{z}/{x}/{y}{scalex}.png?lang={language}",
                {
                    maxZoom: 18
                    , attribution: '<a target="blank" href="https://www.mediawiki.org/wiki/Maps/Technical_Implementation">Wikimedia maps beta</a> | Map data &copy; <a target="blank" href="http://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
                    , server: "https://maps.wikimedia.org"
                    , style: "osm-intl" // "osm" // Map style to use.Use "osm-intl" for map with labels, "osm" for map without labels.
                    , scalex: scalex
                    , language: getUserLanguage() // fr, it, en
                }
            ).addTo(map);

            loadMarkers();
            loadWerbetafeln();


            // Add a km/miles scale
            L.control.scale({ metric: true, imperial: false, maxWidth: 150 }).addTo(map);



            // Update the zoom level label
            map.on('zoomend', function ()
            {
                var uid;
                document.getElementById('zoom-level').innerHTML = 'Zoom Level: ' + map.getZoom();

                if (map.getZoom() > 16)
                {
                    uid = null;
                    for (uid in werbetafeln)
                    {
                        if (werbetafeln.hasOwnProperty(uid))
                        {
                            //werbetafeln[uid].remove();
                            werbetafeln[uid].addTo(map);
                        }
                    }
                }
                else
                {
                    uid = null;
                    for (uid in werbetafeln)
                    {
                        if (werbetafeln.hasOwnProperty(uid))
                        {
                            werbetafeln[uid].remove();
                        }
                    }
                }

            });



            //var legend = L.control({ position: 'topright' });
            //legend.onAdd = function (map)
            //{
            //    var div = L.DomUtil.create('div', 'info legend');
            //    div.innerHTML = '<select><option>1</option><option>2</option><option>3</option></select>';
            //    div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
            //    return div;
            //};
            //legend.addTo(map);



            //Right click on the map activated
            map.on("contextmenu", function (e)
            {
                // console.log("map contextmenu", e)

                function addPosition(latlng)
                {
                    return ' data-position="' + latlng.lat + ' ' + latlng.lng + '" ';
                }


                var contextMenu = '';
                contextMenu += '<span style="font-weight: bold;">Hier können Sie</span><br />';
                contextMenu += '<a onclick="handleContextOption(\'werbetafel\', this.getAttribute(\'data-position\'));" ' + addPosition(e.latlng) + '>eine Leuchtreklame hinzufügen</a>';
                // contextMenu += '<br /><a style="color: gray;" onclick="handleContextOption(\'addPolygon\', this.getAttribute(\'data-position\'));" ' + addPosition(e.latlng) + '>Polygon zuweisen</a>';

                var popup = new L.Popup({ closeButton: true, autoClose: true })
                    .setLatLng(e.latlng)
                    .setContent(contextMenu)
                    //.openOn(map)
                    ;

                popup.openOn(map);
            });


            //map.on("click", function (e)
            //{
            //    console.log(e.latlng);
            //});


            //map.on("dblclick", function (e)
            //{
            //    console.log("doubleClicked");
            //});


            /*
            // Add current location to URL hash
            // var hash = new L.Hash(map);
            var marker = L.marker([47.552096, 9.226189]).addTo(map);
            marker
            .bindTooltip("COR Managementsysteme GmbH",
            {
            permanent: true,
            direction: 'top'
            //direction: 'right'
            }
            )
            .bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46")
            // .openPopup()
            ;
            */
        }

        // initMap();

        window.setTimeout(initMap, 100);


        function loadLegend()
        {
            var url = "../ajax/AnySelect.ashx?sql=Maps.Gebaeudekategorie.sql&BE_ID={@BE_Hash}";
            url = SetDefaultVariables(url);


            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    // console.log(table.columns);
                    // console.log(table.columns["OBJ_Label"].index);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_kurz = table.columns["OBJ_Kurz"].index;
                    var index_lang = table.columns["OBJ_Lang"].index;
                    var index_color = table.columns["OBJ_Color"].index;
                    // var index_sort = table.columns["OBJ_Sort"].index;


                    // Empty legends
                    var gk_legend = document.getElementById("gk_legend");
                    while (gk_legend.hasChildNodes())
                    {
                        gk_legend.removeChild(gk_legend.lastChild);
                    } // Whend

                    function addRow(color, text)
                    {

                        var tr = document.createElement("tr");
                        var tdSquare = document.createElement("td");
                        var tdText = document.createElement("td");
                        tdSquare.className = "leg";
                        tdSquare.style["background-color"] = color;
                        tdText.className = "cont";

                        tdText.appendChild(document.createTextNode(text));
                        tr.appendChild(tdSquare);
                        tr.appendChild(tdText);

                        return tr;
                    } // End Function addRow


                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var kurz = table.rows[i][index_kurz];
                        var lang = table.rows[i][index_lang];
                        var color = table.rows[i][index_color];
                        //var sort = table.rows[i][index_sort];

                        // console.log(uid, kurz, lang, color);
                        gk_legend.appendChild(addRow(color, lang));
                    }

                }).send();
        }

        loadLegend();




        function loadApertureColors()
        {
            var url = "../ajax/AnySelect.ashx?sql=Maps.ApertureColors.sql&BE_ID={@BE_Hash}";
            url = SetDefaultVariables(url);


            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    var index_uid = table.columns["COL_Aperture"].index;
                    var index_color = table.columns["COL_Hex"].index;

                    // Empty legends
                    var gk_legend = document.getElementById("gk_legend");
                    while (gk_legend.hasChildNodes())
                    {
                        gk_legend.removeChild(gk_legend.lastChild);
                    } // Whend

                    function addRow(color, text)
                    {
                        var tr = document.createElement("tr");
                        var tdSquare = document.createElement("td");
                        var tdText = document.createElement("td");
                        tdSquare.className = "leg";
                        tdSquare.style["background-color"] = color;
                        tdText.className = "cont";

                        tdText.appendChild(document.createTextNode(text));
                        tr.appendChild(tdSquare);
                        tr.appendChild(tdText);

                        return tr;
                    } // End Function addRow


                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var color = table.rows[i][index_color];
                        //var sort = table.rows[i][index_sort];

                        gk_legend.appendChild(addRow(color, uid));
                    }

                }).send();
        }

        // loadApertureColors();


        function receiveMessage(event)
        {
            console.log("receiveMessage");
            if (event == null || event.data == null)
            {
                console.log("no event or no data", event);
                return;
            }



            var message;

            //if (event.origin !== "http://robertnyman.com")
            if (false)
            {
                message = 'You ("' + event.origin + '") are not worthy';
            }
            else
            {
                message = 'I got "' + event.data + '" from "' + event.origin + '"';
            }

            console.log("");
            console.log("event", event);
            console.log("");

            var tData = null;

            try
            {
                tData = (typeof event.data === 'string') ? JSON.parse(event.data) : event.data;
            }
            catch (ex)
            {
                console.log(ex, event);
                console.dir(event);
            }

            var tAction = (tData.Action || '').toLowerCase();

            switch (tAction)
            {
                case 'vws.tree.onafterselectionchange':
                    window.top.Portal.Frameset.focusFrameByWindow(window);
                    //console.log("type", tData.Param.Data.Type)
                    //console.log("value", tData.Param.Data.Value)
                    //console.log("text", tData.Param.Data.Text)
                    //console.log("parent", tData.Param.Data.Parent)
                    //console.log("ap", tData.Param.Data.ApertureObjID)
                    //console.log("_hasPRT", tData.Param.Data._hasPRT);
                    //console.log("_hasInsert", tData.Param.Data._hasInsert);
                    //console.log("_hasDelete", tData.Param.Data._hasDelete);

                    // target: typ (ld, ort, so, gb)
                    onBaumClick(tData.Param.Data.Value, tData.Param.Data.Type);
                    break;
                case 'vws.tree.navigateto':
                    // This is the event I need to CALL !
                    /*
                    VWS.Tree.navigateTo(
                    tData.Param.navigateTo,
                    tData.Param.navigateToAction
                    );
                    */
                    break
                default:
                    console.log("unhandled event", event);
                    var tData = (typeof event.data === 'string') ? JSON.parse(event.data) : event.data
                    console.log(JSON.stringify(tData, null, 2));
                    break;
            }

            // event.source.postMessage("thanks, got it ;)", event.origin);
        } // End Function ReceiveMessage


        if (window.removeEventListener)
            window.removeEventListener("message", receiveMessage, false);
        else
            window.detachEvent("onmessage", receiveMessage);


        if (!window['postMessage'])
            alert("oh crap");
        else
        {
            if (window.addEventListener)
            {
                //alert("standards-compliant");
                // For standards-compliant web browsers (ie9+)
                console.log("listening for message...");
                window.addEventListener("message", receiveMessage, false);
            }
            else
            {
                console.log("listening for IE message...");
                //alert("not standards-compliant (ie8)");
                window.attachEvent("onmessage", receiveMessage);
            }
        }

    </script>

</body>
</html>
